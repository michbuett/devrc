
#+TITLE: Emacs configuration
#+PROPERTY: header-args :tangle yes :lexical t

* Config-files
Update =init.el= from =init.org= automatically
#+BEGIN_SRC emacs-lisp
  (defun tangle-init ()
   "If the current buffer is 'init.org' the code-blocks are tangled, and the
    tangled file is compiled."
   (interactive)
   (when (equal (buffer-file-name)
	(file-truename (concat user-emacs-directory "init.org")))
     ;; Avoid running hooks when tangling.
     (let ((prog-mode-hook nil))
       (org-babel-tangle)
       (byte-compile-file (concat user-emacs-directory "init.el"))
       (message "...compiled emacs config"))))

  (add-hook 'after-save-hook 'tangle-init)
#+END_SRC

Create more code blocks easily using "el"+[TAB]
#+BEGIN_SRC emacs-lisp
  ;; This is needed as of Org 9.2
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
#+END_SRC

I prefer not to clutter =.emacs= with customizations, so create an =init-custom.el=.
#+BEGIN_SRC emacs-lisp
  (setq custom-file "~/init-custom.el")
  (unless (file-exists-p custom-file)
    (with-temp-buffer
      (write-file custom-file)))
  (load-file custom-file)
#+END_SRC

* Package repositories
Get packages from ELPA, MELPA +and org+ by default. This can be customized (e.g. to use a local checkout of =spacemacs-elpa-mirror= by customizing =package-archives=).

#+BEGIN_SRC emacs-lisp
  (message "Init package sources")
  (require 'package)
  (setq package-archives
        '(("gnu" . "https://elpa.gnu.org/packages/")
          ("melpa" . "https://melpa.org/packages/")
          ("melpa-stable" . "https://stable.melpa.org/packages/")))
  (package-initialize)
#+END_SRC

From here-on out =use-package= loads packages. We almost always want to =:ensure= packages are present.
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (require 'use-package)

  (setq use-package-always-ensure t)
#+END_SRC

* Path
Make Emacs use the $PATH set up by the user's shell
#+BEGIN_SRC emacs-lisp
(when (memq window-system '(mac ns))
  (use-package exec-path-from-shell
    :ensure t
    :config
    (exec-path-from-shell-initialize)))
#+END_SRC
* Editing
** Encoding
UTF-8 everywhere, but don't mess with line-endings.
#+BEGIN_SRC emacs-lisp
(set-language-environment "UTF-8")
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
#+END_SRC

It's also handy to programmatically convert files, mainly when Windows has UTF-16'd something.
#+BEGIN_SRC emacs-lisp
  (defun convert-file-encoding (file coding-system)
    "Convert FILE to CODING-SYSTEM without visiting it."
    (with-temp-buffer
      (insert-file-contents file)
      (let ((coding-system-for-write coding-system))
        (write-region nil nil file))))
#+END_SRC

** Keyboard mapping
*** General
ESC Cancels All
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+END_SRC

It's nice to have a guide...
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :demand
    :init
    ;; sort based on the key description ignoring case
    (setq which-key-sort-order 'which-key-description-order)
    (with-eval-after-load 'lsp-mode
      (add-hook 'lsp-mode-hook #'lsp-enable-which-key-integration))
    (which-key-mode))
#+END_SRC

general.el, a better, more general replacement for evil-leader
#+BEGIN_SRC emacs-lisp
  ;; (use-package general
  ;;   :config
  ;;   (general-define-key
  ;;    :keymaps '(normal insert visual emacs)
  ;;    :prefix "SPC"
  ;;    :global-prefix "C-SPC"
  ;;    "/" '(comment-or-uncomment-region :which-key "toggle comment")
  ;;    "?"  '(:ignore t :which-key "help")
  ;;    "?f" 'describe-function
  ;;    "?b" 'describe-bind
  ;;    "?p" 'describe-personal-keybindings
  ;;    "?v" 'describe-variable
  ;;    "??" 'which-key-show-top-level
  ;;    "F"  'toggle-frame-fullscreen
  ;;    "P" 'proced
  ;;    "D" 'dired))
#+END_SRC

*** Meow
#+BEGIN_SRC emacs-lisp
  (use-package meow
    :config
    (defun mb/meow-line-backwards ()
      "like 'meow-line' but backwards"
      (interactive)
      (let ((current-prefix-arg
	     (if (meow--direction-backward-p) 1 -1)))
	(print current-prefix-arg)
	(call-interactively 'meow-line )))

    (setq meow-cheatsheet-physical-layout meow-cheatsheet-physical-layout-iso)
    (setq meow-cheatsheet-layout 
	  '((<TLDE> "^"	"°")
	    (<AE01> "1"	"!")
	    (<AE02> "2"	"\"")
	    (<AE03> "3"	"§")
	    (<AE04> "4"	"$")
	    (<AE05> "5"	"%")
	    (<AE06> "6"	"&")
	    (<AE07> "7"	"/")
	    (<AE08> "8"	"(")
	    (<AE09> "9"	")")
	    (<AE10> "0"	"=")
	    (<AE11> "ß"	"?")
	    (<AE12> "´"	"`")
	    (<AD01> "q"	"Q")
	    (<AD02> "w"	"W")
	    (<AD03> "e"	"E")
	    (<AD04> "r"	"R")
	    (<AD05> "t"	"T")
	    (<AD06> "z"	"Z")
	    (<AD07> "u"	"U")
	    (<AD08> "i"	"I")
	    (<AD09> "o"	"O")
	    (<AD10> "p"	"P")
	    (<AD11> "ü"	"Ü")
	    (<AD12> "+"	"*")
	    (<AC01> "a"	"A")
	    (<AC02> "s"	"S")
	    (<AC03> "d"	"D")
	    (<AC04> "f"	"F")
	    (<AC05> "g"	"G")
	    (<AC06> "h"	"H")
	    (<AC07> "j"	"J")
	    (<AC08> "k"	"K")
	    (<AC09> "l"	"L")
	    (<AC10> "ö"	"Ö")
	    (<AC11> "ä"	"Ä")
	    (<LSGT> "<"	">")
	    (<AB01> "y"	"Y")
	    (<AB02> "x"	"X")
	    (<AB03> "c"	"C")
	    (<AB04> "v"	"V")
	    (<AB05> "b"	"B")
	    (<AB06> "n"	"N")
	    (<AB07> "m"	"M")
	    (<AB08> ","	";")
	    (<AB09> "."	":")
	    (<AB10> "-"	"_")
	    (<BKSL> "#" "'")))

    (meow-motion-overwrite-define-key
     '("j" . meow-next)
     '("k" . meow-prev)
     '("<escape>" . ignore))

    (meow-leader-define-key
     ;; SPC j/k will run the original command in MOTION state.
     '("j" . "H-j")
     '("k" . "H-k")
     ;; Use SPC (0-9) for digit arguments.
     '("1" . meow-digit-argument)
     '("2" . meow-digit-argument)
     '("3" . meow-digit-argument)
     '("4" . meow-digit-argument)
     '("5" . meow-digit-argument)
     '("6" . meow-digit-argument)
     '("7" . meow-digit-argument)
     '("8" . meow-digit-argument)
     '("9" . meow-digit-argument)
     '("0" . meow-digit-argument)
     '("/" . meow-keypad-describe-key)
     '("-" . split-window-below)
     '("|" . split-window-horizontally)
     '("s" . swiper) ; fuzzy find line in current buffer
     '("b" . ivy-switch-buffer) ; fuzzy find buffer by name
     '("p" . counsel-semantic-or-imenu) ; fuzzy find in document structure (e.g. function name)
     '("f" . counsel-fzf) ; fuzzy find files in git repo
     '("?" . meow-cheatsheet))
    (meow-normal-define-key
     '("0" . meow-expand-0)
     '("9" . meow-expand-9)
     '("8" . meow-expand-8)
     '("7" . meow-expand-7)
     '("6" . meow-expand-6)
     '("5" . meow-expand-5)
     '("4" . meow-expand-4)
     '("3" . meow-expand-3)
     '("2" . meow-expand-2)
     '("1" . meow-expand-1)
     '("-" . negative-argument)
     '(";" . meow-reverse)
     '("," . meow-inner-of-thing)
     '("." . meow-bounds-of-thing)
     '("[" . meow-beginning-of-thing)
     '("]" . meow-end-of-thing)
     '("a" . meow-append)
     '("b" . meow-back-word)
     '("B" . meow-back-symbol)
     '("c" . meow-change)
     '("d" . meow-delete)
     '("D" . meow-backward-delete)
     '("e" . meow-next-word)
     '("E" . meow-next-symbol)
     '("f" . meow-find)
     '("g" . meow-cancel-selection)
     '("G" . meow-grab)
     '("h" . meow-left)
     '("H" . meow-left-expand)
     '("i" . meow-insert)
     '("I" . meow-open-above)
     '("j" . meow-next)
     '("J" . meow-next-expand)
     '("k" . meow-prev)
     '("K" . meow-prev-expand)
     '("l" . meow-right)
     '("L" . meow-right-expand)
     '("m" . meow-join)
     '("n" . meow-search)
     '("o" . meow-open-below)
     '("O" . meow-open-above)
     '("p" . meow-yank)
     '("q" . meow-quit)
     '("Q" . meow-goto-line)
     '("r" . meow-replace)
     '("R" . meow-swap-grab)
     '("s" . meow-kill)
     '("t" . meow-till)
     '("u" . meow-undo)
     '("U" . meow-undo-in-selection)
     '("v" . meow-visit)
     '("w" . meow-mark-word)
     '("W" . meow-mark-symbol)
     '("x" . meow-line)
     '("X" . mb/meow-line-backwards)
     '("y" . meow-save)
     '("Y" . meow-sync-grab)
     '("z" . meow-pop-selection)
     '("'" . repeat)
     '("/" . meow-comment)
     '("?" . helpful-at-point)
     '("C-l" . windmove-right)
     '("C-h" . windmove-left)
     '("C-j" . windmove-down)
     '("C-k" . windmove-up)
     '("=" . indent-region)
     '("<escape>" . ignore))
    (meow-global-mode 1))

  (use-package key-chord
    :after meow
    :init
    (key-chord-mode 1) ; turn on key-chord-mode
    (key-chord-define meow-insert-state-keymap "jk" 'meow-insert-exit))
#+END_SRC

*** Evil
Join the dark side.
#+BEGIN_SRC emacs-lisp
  ;; (use-package evil
  ;;   :after general
  ;;   :init
  ;;   (setq evil-want-integration t)
  ;;   (setq evil-want-keybinding nil)
  ;;   :config
  ;;   (evil-mode 1)
  ;;   (general-define-key
  ;;    :keymaps '(normal insert visual emacs)
  ;;    :prefix "SPC"
  ;;    :global-prefix "C-SPC"
  ;;    "-" '(evil-window-split :which-key "split window (horizontal)")
  ;;    "|" '(evil-window-vsplit :which-key "split window (vertical)")))

  ;; (setq-default indent-tabs-mode nil)

  ;; (evil-define-key 'normal 'evil-normal-state-map
  ;;   (kbd "C-h") 'evil-window-left
  ;;   (kbd "C-l") 'evil-window-right
  ;;   (kbd "C-k") 'evil-window-up
  ;;   (kbd "C-j") 'evil-window-down)

  ;; ;; (evil-define-key 'insert 'evil-insert-state-map
  ;; ;;   (kbd "jj") 'evil-normal-state)

  ;; (bind-key "º" 'evil-forward-section-begin)
  ;; (bind-key "∆" 'evil-backward-section-begin)

  ;; (use-package key-chord
  ;;          :init
  ;;          (key-chord-mode 1) ; turn on key-chord-mode
  ;;          (key-chord-define evil-insert-state-map "jk" 'evil-normal-state))
#+END_SRC

[[https://github.com/emacs-evil/evil-collection]] is used to automatically configure various Emacs modes with Vi-like keybindings for evil-mode.
#+BEGIN_SRC emacs-lisp
  ;; (use-package evil-collection
  ;;   :after evil
  ;;   :config
  ;;   (evil-collection-init))
#+END_SRC

** Movement
#+BEGIN_SRC emacs-lisp
  ;; (use-package avy
  ;;   :config
  ;;   (evil-define-key 'normal 'evil-normal-state-map
  ;;     (kbd "s") 'avy-goto-char-timer))
#+END_SRC
** Completion
**** Company
Auto-completion package
https://company-mode.github.io/
#+BEGIN_SRC emacs-lisp
  (use-package company
    :demand
    :defer t
    :diminish
    :hook (prog-mode . company-mode)
    :bind (:map company-active-map
		("<tab>" . 'company-complete-common-or-cycle)
		("<backtab>" . 'company-select-previous)
		("<return>" . nil))
	  ;; (:map prog-mode-map
	  ;;       ("<tab>" . 'company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 3)
    (company-eclim-auto-save nil)
    (company-dabbrev-downcase nil)
    (company-auto-commit 'ignore)
    (company-auto-commit-chars 'ignore)
    (company-selection-wrap-around t)
    (company-idle-delay 0.1))

  ; (use-package company-try-hard
  ;  :defer t
  ;  :bind
    ;(:map company-active-map
    ;      ("C-n" . #'company-try-hard))
    ;(:map prog-mode-map
    ;      ("C-n" . #'company-try-hard)))
    ;; :config
    ;; (global-set-key (kbd "C-n") #'company-try-hard))
#+END_SRC

**** LSP
Emacs Polyglot: an Emacs LSP client that stays out of your way
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    ;; :after general
    :commands (lsp lsp-deferred)
    :init
    (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
    (setq lsp-headerline-breadcrumb-enable nil)
    (setq lsp-eldoc-render-all nil)
    (setq lsp-idle-delay 0.6)
    (setq lsp-rust-analyzer-server-display-inlay-hints t)
    :config
    (with-eval-after-load 'lsp-mode
      (add-hook 'lsp-mode-hook #'lsp-enable-which-key-integration)))
    ;; (general-define-key
    ;;  :keymaps '(normal insert visual emacs)
    ;;  :prefix "SPC"
    ;;  :global-prefix "C-SPC"
    ;;  "l"  '(:ignore t :which-key "language server")
    ;;  "ld" '(lsp-find-definition :which-key "goto definition")
    ;;  "lf" '(lsp-execute-code-action :which-key "auto code correction")
    ;;  "lh" '(lsp-ui-doc-glance :wich-key "glance at documentation")))

  (use-package lsp-ui
    :commands lsp-ui-mode
    :config
    (setq lsp-ui-sideline-show-hover t)
    (setq lsp-ui-sideline-diagnostic-max-lines 3)
    (setq lsp-ui-doc-enable nil))
  ;;   (evil-global-set-key 'normal (kbd "K") 'lsp-ui-doc-glance)
#+END_SRC

**** Ivy/Counsel/Swiper
Narrowing lists and search results, complete commands (e.g. M-x)
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :diminish
    :bind (:map ivy-switch-buffer-map
		("C-k" . ivy-previous-line) ;; override "kill buffer"
	   :map ivy-minibuffer-map
		("C-j" . ivy-next-line)
		("C-k" . ivy-previous-line)
		([escape] . keyboard-escape-quit))
    :config
    (setq ivy-height 20)
    :init
    (ivy-mode 1))

  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))

  (use-package ivy-hydra)

  (use-package ivy-posframe
    :config
    (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display)))
    :init
    (ivy-posframe-mode 1))

  (use-package counsel
    :diminish
    ;; :bind (:map meow-normal-state-keymap
    ;; 	      ("C-s" . swiper) ; fuzzy find line in current buffer
    ;; 	      ("C-b" . ivy-switch-buffer) ; fuzzy find buffer by name
    ;; 	      ("C-p" . counsel-semantic-or-imenu) ; fuzzy find in document structure (e.g. function name)
    ;; 	      ("C-f" . counsel-fzf)) ; fuzzy find files in git repo

    :config
    (progn
	      (setq counsel-fzf-dir-function 'mb/git-root-dir)
	      (setenv "FZF_DEFAULT_COMMAND" "rg --files")
	      (counsel-mode 1)
	      ))

  (defun mb/git-root-dir ()
    "Find the git root dir for the current buffer."
    (vc-git-root (buffer-file-name)))
#+END_SRC

[[https://github.com/Wilfred/helpful]] is an alternative to the built-in Emacs help that provides much more contextual information.
#+begin_src emacs-lisp
  (use-package helpful
    :after general
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key)
    :config
    (general-define-key
     :keymaps '(normal insert visual emacs)
     :prefix "SPC"
     :global-prefix "C-SPC"
     "?."  '(helpful-at-point :which-key "describe item at point")))
#+end_src
** Programming
*** General
Enable y/n answers
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Fix for german keyboard layouts (by default [ALT] is meta key)
#+BEGIN_SRC emacs-lisp
  (setq mac-option-modifier nil
        mac-right-option-modifier 'meta)
#+END_SRC

By default every text editor should display line and column number
#+BEGIN_SRC emacs-lisp
  (setq-default truncate-lines t)

  (add-hook 'prog-mode-hook 'column-number-mode)
  (global-display-line-numbers-mode)

  (show-paren-mode 1)  ;Highlights matching parenthesis
  (global-hl-line-mode 1) ;Highlight current line

  ;; There's nothing I dislike more than tabs in my files.
  (setq tab-width 2 indent-tabs-mode nil)
#+END_SRC

Beeping is for robots. I'm no robot
#+BEGIN_SRC emacs-lisp
  (setq visible-bell t)
  (setq ring-bell-function 'ignore)
#+END_SRC

Electric indent interferes with lots of modes' own indenting, so disable it.
#+BEGIN_SRC emacs-lisp
  (setq electric-indent-inhibit t)
#+END_SRC

Syntaxchecker/Linter by default
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :after general
    :ensure t
    :config
    (general-define-key
     :keymaps '(normal insert visual emacs)
     :prefix "SPC"
     :global-prefix "C-SPC"
     "c"  '(:ignore t :which-key "flycheck")
     "cc" '(flycheck-buffer :which-key "check current buffer")
     "cl" '(flycheck-list-errors :which-key "list errors")
     "cn" '(flycheck-next-error :which-key "jump to next error")
     "cp" '(flycheck-previous-error :which-key "jump to prev error"))
    :init
    (global-flycheck-mode))

#+END_SRC

*** Emacs Lisp
Nobody likes dynamic binding by default.
#+BEGIN_SRC emacs-lisp :padline no
  (setq lexical-binding t)
#+END_SRC

Make ad-hoc lisping more comfortable.
#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'prettify-symbols-mode)
  (add-hook 'emacs-lisp-mode-hook 'eldoc-mode)

  (defun mb/eval-buffer ()
    "Evaluating current buffer with a little feedback message."
    (interactive)
    (eval-buffer)
    (message "buffer evaluated."))

  (define-key meow-normal-state-keymap (kbd "C-e") 'mb/eval-buffer)
#+END_SRC

*** Rust
Rust support is pretty basic at this stage. Autocompletion comes from a separate program, =racer= that reads the stdlib source code.
#+BEGIN_SRC emacs-lisp
  (use-package ron-mode)
  (use-package rust-mode
    :after general
    :hook (rust-mode . lsp)
    :config
    (setq company-backends '((company-capf
                           company-keywords
                           company-dabbrev
                           )))
    (general-define-key
     :keymaps '(normal insert visual emacs)
     :prefix "SPC"
     :global-prefix "C-SPC"
     "r"  '(:ignore t :which-key "keys specific for rust")
     "rf" 'rust-format-buffer
     "rc" 'rust-compile
     "rt" 'rust-test))

  (use-package flycheck-rust)

  (add-to-list 'auto-mode-alist '("\\.rs\\'" . rust-mode))
  (add-hook 'flycheck-mode-hook #'flycheck-rust-setup)
  (add-hook 'rust-mode-hook  (lambda () (modify-syntax-entry ?_ "w" rust-mode-syntax-table)))
#+END_SRC

*** PHP
    Basic support for editing PHP files
#+BEGIN_SRC emacs-lisp
  (use-package php-mode
    :ensure t
    :defer t)

  (use-package company-php
    :ensure t
    :defer t)

  (use-package phpactor
    :ensure t)

  (use-package company-phpactor
    :ensure t)
#+END_SRC
*** CSV
#+BEGIN_SRC emacs-lisp
  (use-package csv-mode)
#+END_SRC

*** JSON
#+BEGIN_SRC emacs-lisp
    (use-package json-mode :mode "\\.json")
    (use-package json-navigator)
    (use-package json-reformat)
#+END_SRC

*** YAML
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode :mode "\\.ya?ml")
#+END_SRC

*** Text markup languages
   The ubiquitous, but not actually-that-pleasant, Markdown. I've looked at a couple of real-time preview modes and they're nice, but all have external dependencies requiring Go or Ruby, which I'm not interested in installing. (I run a lean system. 😉)
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :mode "\\.md$"
    :config (progn
              (define-key markdown-mode-map (kbd "C-c C-TAB") 'markdown-table-align)))
#+END_SRC

*** Graphviz/Dot
#+BEGIN_SRC emacs-lisp
  (use-package graphviz-dot-mode
    :ensure t
    :config
    (setq graphviz-dot-indent-width 2))

  ;; (use-package company-graphviz-dot)
#+END_SRC

** Dired
#+BEGIN_SRC emacs-lisp
  (when (string= system-type "darwin")
    (setq dired-use-ls-dired t
          insert-directory-program "/usr/local/bin/gls"
          dired-listing-switches "-aBhl --group-directories-first"))
#+END_SRC

** Start-Up
Another good idea lovingly ripped off from Spacemacs.
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :demand
    :config
    (progn
      (dashboard-setup-startup-hook)
      (setq dashboard-banner-logo-title "<[ E M A C S ]>"
            dashboard-set-footer t
            dashboard-set-file-icons t
            dashboard-items '(;(projects . 5)
                              (bookmarks . 5)
                              (recents  . 5)))))
#+END_SRC

* Display and appearance
** Frame
Start maximized and allow fullscreen
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC

** Performance
Attempt to improve long line performance.
#+BEGIN_SRC emacs-lisp
  (setq-default bidi-display-reordering nil)
#+END_SRC

** Themes
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :config
    ;; Global settings (defaults)
    (load-theme 'doom-one t)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+END_SRC

Highlight selected buffer (by dimming others)
#+BEGIN_SRC emacs-lisp
  (use-package dimmer
    :defer t
    :config
    ;; (add-to-list 'dimmer-prevent-dimming-predicates 'lsp-ui-doc-show)
    (setq dimmer-fraction 0.4))

  (dimmer-mode t)
#+END_SRC

** Font
Use Fira Code with ligatures
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(font . "Fira Mono for Powerline-14" ))
  (set-face-attribute 'default t :font "Fira Mono for Powerline-14" )

  ;; (when (window-system)
  ;;   (set-frame-font "Fira Code"))
  ;; (let ((alist '((33 . ".\\(?:\\(?:==\\|!!\\)\\|[!=]\\)")
  ;;                (35 . ".\\(?:###\\|##\\|_(\\|[#(?[_{]\\)")
  ;;                (36 . ".\\(?:>\\)")
  ;;                (37 . ".\\(?:\\(?:%%\\)\\|%\\)")
  ;;                (38 . ".\\(?:\\(?:&&\\)\\|&\\)")
  ;;                (42 . ".\\(?:\\(?:\\*\\*/\\)\\|\\(?:\\*[*/]\\)\\|[*/>]\\)")
  ;;                (43 . ".\\(?:\\(?:\\+\\+\\)\\|[+>]\\)")
  ;;                (45 . ".\\(?:\\(?:-[>-]\\|<<\\|>>\\)\\|[<>}~-]\\)")
  ;;                (46 . ".\\(?:\\(?:\\.[.<]\\)\\|[.=-]\\)")
  ;;                (47 . ".\\(?:\\(?:\\*\\*\\|//\\|==\\)\\|[*/=>]\\)")
  ;;                (48 . ".\\(?:x[a-zA-Z]\\)")
  ;;                (58 . ".\\(?:::\\|[:=]\\)")
  ;;                (59 . ".\\(?:;;\\|;\\)")
  ;;                (60 . ".\\(?:\\(?:!--\\)\\|\\(?:~~\\|->\\|\\$>\\|\\*>\\|\\+>\\|--\\|<[<=-]\\|=[<=>]\\||>\\)\\|[*$+~/<=>|-]\\)")
  ;;                (61 . ".\\(?:\\(?:/=\\|:=\\|<<\\|=[=>]\\|>>\\)\\|[<=>~]\\)")
  ;;                (62 . ".\\(?:\\(?:=>\\|>[=>-]\\)\\|[=>-]\\)")
  ;;                (63 . ".\\(?:\\(\\?\\?\\)\\|[:=?]\\)")
  ;;                (91 . ".\\(?:]\\)")
  ;;                (92 . ".\\(?:\\(?:\\\\\\\\\\)\\|\\\\\\)")
  ;;                (94 . ".\\(?:=\\)")
  ;;                (119 . ".\\(?:ww\\)")
  ;;                (123 . ".\\(?:-\\)")
  ;;                (124 . ".\\(?:\\(?:|[=|]\\)\\|[=>|]\\)")
  ;;                (126 . ".\\(?:~>\\|~~\\|[>=@~-]\\)")
  ;;                )
  ;;              ))
  ;;   (dolist (char-regexp alist)
  ;;     (set-char-table-range composition-function-table (car char-regexp)
  ;;                           `([,(cdr char-regexp) 0 font-shape-gstring]))))
#+END_SRC

** Widgets
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)

  (unless (frame-parameter nil 'tty)
      (scroll-bar-mode -1))

  (setq inhibit-splash-screen t
        ring-bell-function 'ignore)
#+END_SRC

** Modeline
   Pretty icons for modeline, filetree, git and more
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :ensure t)
#+END_SRC

   The doom modeline is nice and fast https://github.com/seagle0128/doom-modeline
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :config (setq doom-modeline-height 20
                  doom-modeline-modal-icon t))

    ;:hook (after-init . doom-modeline-init))
#+END_SRC

Show current time/date on demand.
#+BEGIN_SRC emacs-lisp
  (defun mb/echo-date-time ()
    "Displays the current date and time in the echo area."
    (interactive)
    (message (format-time-string "[W:%W] %a, %d.%m.%Y, %H:%M:%S")))

    (general-define-key
     :keymaps '(normal insert visual emacs)
     :prefix "SPC"
     :global-prefix "C-SPC"
     "t" '(mb/echo-date-time :which-key "show time/date"))
#+END_SRC

Hide minor modes 
https://github.com/myrjola/diminish.el

When we diminish a mode, we are saying we want it to continue doing its work for
us, but we no longer want to be reminded of it. It becomes a night worker, like 
a janitor; it becomes an invisible man; it remains a component, perhaps an 
important one, sometimes an indispensable one, of the mechanism that maintains 
the day-people's world, but its place in their thoughts is diminished, usually 
to nothing. As we grow old we diminish more and more such thoughts, such people, 
usually to nothing. 
                                                               -- Will Mengarini
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :config
    (diminish 'undo-tree-mode))
#+END_SRC

* Temporary files
Backups and lock files not required.
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil
        create-lockfiles nil)
#+END_SRC

* Shells
** General
Use https://github.com/akermu/emacs-libvterm as a replacement for the build-in =term-mode=. This seems to work better with evil
#+BEGIN_SRC emacs-lisp
  (use-package vterm
      :ensure t
  )

  (add-hook 'vterm-mode-hook (lambda () (display-line-numbers-mode -1)))
#+END_SRC

It is nice to have the terminal right there when you need it.
#+BEGIN_SRC emacs-lisp
  (defun mb/term-toggle ()
    "Toggle terminal in the current buffer."
    (interactive)
    (if (derived-mode-p 'vterm-mode)
        (bury-buffer)
      (if (get-buffer "vterm") (switch-to-buffer "vterm") (vterm))))

  ;; (evil-define-key 'normal 'evil-normal-state-map
  ;;   (kbd "C-t") #'mb/term-toggle)
#+END_SRC

* End
#+BEGIN_SRC emacs-lisp
(provide 'init)
;;; init.el ends here
#+END_SRC
